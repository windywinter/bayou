#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import socket
import os

if not len(sys.argv) == 3:
	print "Usage : server [id] [master_port]"
	sys.exit()

SERVER_PORT_BASE = 20000
CLIENT_PORT_BASE = SERVER_PORT_BASE


pid = int(sys.argv[1]) # id to start server
master_port = int(sys.argv[2])

def master_handler():
	global master_sock, sock_to_server
	while True:
        try:
            data = master_sock.recv(256)
        except:
            data = None
        if data:
            logging.debug("data received from master: " + data)
            for line in data.split('\n'):
                if not line:
                    break
                s = line.split()

                songName = None
                url = None
                server_id = None
                msg_to_server = None
                if s[0] == 'add':
                	songName = s[1]
                	url = s[2]
                    server_id = int(s[3])
                    msg_to_server = '%s %s %s\n' % (s[0], s[1], s[2])
                elif s[0] == 'get':
                    songName = s[1]
                    server_id = int(s[2])
                    msg_to_server = '%s %s\n' % (s[0], s[1])
                elif s[0] == 'delete':
                    songName = s[1]
                    server_id = int(s[2])
                    msg_to_server = '%s %s\n' % (s[0], s[1])

                if server_id:
                	status = sock_to_server.connect_ex(('localhost', SERVER_PORT_BASE + server_id))
                	if status != 0:
                		logging.debug('connection to server failed: ' + server_id)
                		continue

					sock_to_server.sendall(msg_to_server)
					if s[0] == 'get':
						response = sock_to_server.recv(256)
						response = response.split('\n')[0].split()[0]
						master_sock.sendall('getResp %s:%s\n' % (songName, response))
                    sock_to_server.shutdown()
        else:
            logging.info('connection from master closed')
            break
    master_sock.close()
    logging.info('process %d exits', pid)
    os._exit(1)

#TODO

#create socket for master
sock_to_master = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock_to_master.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock_to_master.bind(('localhost', master_port))

# Listen for incoming connections
sock_to_master.listen(1)

# create the socket to server

sock_to_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock_to_server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock_to_server.bind(('localhost', CLIENT_PORT_BASE + pid))

# start responding to master
master_sock, _ = sock_to_master.accept()
# start new thread to handle master connection
thread.start_new_thread(master_handler, ())
