#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import socket
import os
import logging

if not len(sys.argv) == 3:
    print "Usage : server [id] [master_port]"
    sys.exit()

SERVER_PORT_BASE = 20000
CLIENT_PORT_BASE = 25000

pid = int(sys.argv[1]) # id to start server
master_port = int(sys.argv[2])

song_names = {} # songName : number of writes

logging.basicConfig(filename=str(pid) + '.log',format='[' + str(pid) + '] %(levelname)s: %(message)s', level=logging.DEBUG)

def master_handler():
    global master_sock
    while True:
        try:
            data = master_sock.recv(256)
        except:
            data = None
        if data:
            for line in data.split('\n'):
                if not line:
                    break
                logging.debug("data received from master: " + line)
                s = line.split()

                songName = None
                url = None
                server_id = None
                msg_to_server = None
                songName = s[1]
                if songName not in song_names:
                    song_names[songName] = 0
                if s[0] == 'add':
                    url = s[2]
                    server_id = int(s[3])
                    song_names[songName] = song_names[songName] + 1
                    msg_to_server = '%s %d %s %s\n' % (s[0], song_names[songName], s[1], s[2])
                elif s[0] == 'get':
                    server_id = int(s[2])
                    msg_to_server = '%s %s\n' % (s[0], song_names[songName], s[1])
                elif s[0] == 'delete':
                    server_id = int(s[2])
                    song_names[songName] = song_names[songName] + 1
                    msg_to_server = '%s %s\n' % (s[0], song_names[songName], s[1])

                if server_id:
                    sock_to_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock_to_server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                    sock_to_server.bind(('localhost', CLIENT_PORT_BASE + pid))

                    status = sock_to_server.connect_ex(('localhost', SERVER_PORT_BASE + server_id))
                    if status != 0:
                        logging.debug('connection to server failed: ' + server_id)
                        continue

                    sock_to_server.sendall(msg_to_server)
                    
                    response = sock_to_server.recv(256)
                    response = response.split('\n')[0].split()[0]
                    if s[0] == 'get':
                        master_sock.sendall('getResp %s:%s\n' % (songName, response))
                    elif response != 'ack':
                        # write fails
                        song_names[songName] = song_names[songName] - 1
                    sock_to_server.close()
        else:
            logging.info('connection from master closed')
            break
    master_sock.close()
    logging.info('process %d exits', pid)
    os._exit(1)

#TODO

#create socket for master
sock_to_master = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock_to_master.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock_to_master.bind(('localhost', master_port))

# Listen for incoming connections
sock_to_master.listen(1)

# create the socket to server


# start responding to master
master_sock, _ = sock_to_master.accept()
# start new thread to handle master connection
master_handler()
