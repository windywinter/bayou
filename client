#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import socket
import os
import logging
import ast

if not len(sys.argv) == 3:
    print "Usage : server [id] [master_port]"
    sys.exit()

SERVER_PORT_BASE = 20000
CLIENT_PORT_BASE = 25000

pid = int(sys.argv[1]) # id to start server
master_port = int(sys.argv[2])

socks = {} # server_id : connection

write_vvs = {} # {songName : vv}
read_vvs = {} # {songName : vv}

logging.basicConfig(filename=str(pid) + '.log',format='[' + str(pid) + '] %(levelname)s: %(message)s', level=logging.DEBUG)

def vv_inf(mine, other):
    res = mine
    for key in other.keys():
        if key not in res or res[key] < other[key]:
            res[key] = other[key]
    return res

def master_handler():
    global master_sock, write_vvs, read_vvs
    while True:
        try:
            data = master_sock.recv(256)
        except:
            data = None
        if data:
            for line in data.split('\n'):
                if not line:
                    break
                logging.debug("data received from master: " + line)
                s = line.split()

                songName = None
                url = None
                server_id = None
                msg_to_server = None
                songName = s[1]
                if songName not in read_vvs:
                    read_vvs[songName] = {}
                if songName not in write_vvs:
                    write_vvs[songName] = {}
                res_vv = vv_inf(write_vvs[songName], read_vvs[songName])
                if s[0] == 'add':
                    url = s[2]
                    server_id = int(s[3])
                    msg_to_server = '%s %s %s %s\n' % ('add', songName, url, str(res_vv).replace(' ', ''))
                elif s[0] == 'get':
                    server_id = int(s[2])
                    msg_to_server = '%s %s %s\n' % ('get', songName, str(res_vv).replace(' ', ''))
                elif s[0] == 'delete':
                    server_id = int(s[2])
                    msg_to_server = '%s %s %s\n' % ('delete', songName, str(res_vv).replace(' ', ''))

                if server_id not in socks:
                    sock_to_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock_to_server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                    sock_to_server.bind(('localhost', CLIENT_PORT_BASE + pid))

                    status = sock_to_server.connect_ex(('localhost', SERVER_PORT_BASE + server_id))
                    if status != 0:
                        logging.debug('connection to server failed: ' + server_id)
                        continue
                    socks[server_id] = sock_to_server

                socks[server_id].sendall(msg_to_server)
                logging.debug('send to server ' + msg_to_server)
                
                try:
                    response = socks[server_id].recv(256)
                except:
                    response = ''
                logging.debug('response from server ' + response)
                response = response.split('\n')[0].split()
                if s[0] == 'get':
                    ret_url = response[0]
                    master_sock.sendall('getResp %s:%s\n' % (songName, ret_url))
                    if len(response) > 1:
                        read_vvs[songName] = ast.literal_eval(response[1])
                elif response[0] == 'ack':
                    # write succeeded
                    write_vvs[songName] = ast.literal_eval(response[1])

        else:
            logging.info('connection from master closed')
            break
    master_sock.close()
    logging.info('process %d exits', pid)
    os._exit(1)

#TODO

#create socket for master
sock_to_master = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock_to_master.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock_to_master.bind(('localhost', master_port))

# Listen for incoming connections
sock_to_master.listen(1)

# create the socket to server


# start responding to master
master_sock, _ = sock_to_master.accept()
# start new thread to handle master connection
master_handler()
